// P≈ôihl√°≈°en√≠ a registrace

const express = require("express")
const bcrypt = require("bcryptjs")
const jwt = require("jsonwebtoken")
const User = require("../models/User")

const router = express.Router()

// ‚úÖ **Registrace u≈æivatele**
router.post("/register", async (req, res) => {
    try {
        const { name, email, password } = req.body

        if (await User.findOne({ email })) {
            return res.status(400).json({ error: "üò± U≈æivatel s t√≠mto emailem ji≈æ existuje" })
        }
        if (await User.findOne({ name })) {
            return res.status(400).json({ error: "ü§î U≈æivatel s t√≠mto jm√©nem ji≈æ existuje" })
        }

        const hashedPassword = await bcrypt.hash(password, 10)

        const newUser = new User({
            name,
            email,
            password: hashedPassword,
            createdAt: new Date(),
        })

        await newUser.save()
        res.status(201).json({ message: "üëç U≈æivatel vytvo≈ôen", user: newUser })
    } catch (error) {
        console.error("‚ùå Chyba p≈ôi registraci u≈æivatele:", error)
        res.status(500).json({ error: "Chyba serveru" })
    }
})

// ‚úÖ **P≈ôihl√°≈°en√≠ u≈æivatele**
router.post("/login", async (req, res) => {
    try {
        const { email, password } = req.body
        const user = await User.findOne({ email })

        if (!user) {
            return res.status(400).json({ error: "‚ùå U≈æivatel neexistuje" })
        }

        const isMatch = await bcrypt.compare(password, user.password)

        if (!isMatch) {
            return res.status(400).json({ error: "‚ùå Nespr√°vn√© heslo" })
        }

        // ‚úÖ Vytvo≈ôen√≠ JWT tokenu
        const token = jwt.sign(
            { userId: user._id, name: user.name },
            process.env.JWT_SECRET,
            { expiresIn: "1h" }
        )

        res.json({
            message: "‚úÖ P≈ôihl√°≈°en√≠ √∫spƒõ≈°n√©!",
            token,
            user: { name: user.name, email: user.email },
        })
    } catch (error) {
        console.error("‚ùå Chyba p≈ôi p≈ôihla≈°ov√°n√≠:", error)
        res.status(500).json({ error: "Chyba serveru" })
    }
})

module.exports = router
